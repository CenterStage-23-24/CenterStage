package org.firstinspires.ftc.teamcode.Auto;

import com.acmerobotics.dashboard.FtcDashboard;
import com.acmerobotics.dashboard.config.Config;
import com.acmerobotics.dashboard.telemetry.MultipleTelemetry;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.HashMap;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.opencv.core.*;
import org.opencv.core.Core.*;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.*;
import org.opencv.objdetect.*;
import org.openftc.easyopencv.OpenCvPipeline;

/**
 * GripPipeline class.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
@Config
public class PropPipeline extends OpenCvPipeline {

    //Outputs
    private Mat rgbThresholdOutput = new Mat();
    private Mat cvErodeOutput = new Mat();
    private Mat hsvThresholdOutput = new Mat();
    private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();
    private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<>();
    private ArrayList<Double> contourAreas = new ArrayList<>();

    public static double redMax = 255;
    public static double redMin = 0;
    public static double blueMax = 255;
    public static double blueMin = 0;
    public static double greenMax = 255;
    public static double greenMin = 0;
    public static double minArea = 1500;
    public static double maxArea = 10000;

    /*
    public static double redMax = 25;
    public static double redMin = 0;
    public static double blueMax = 60;
    public static double blueMin = 0;
    public static double greenMax = 60;
    public static double greenMin = 0;
     */

    /*
    ROBOT CONSTANTS:
    public static double redMax = 50;
    public static double redMin = 0;
    public static double blueMax = 150;
    public static double blueMin = 0;
    public static double greenMax = 150;
    public static double greenMin = 0;
    public static double minAreaLeft = 500;
    public static double minAreaCenter = 300;
     */

    private String position;
    private String final_position = "";
    private String prev_position;
    private int iteration_threshold = 50;
    private int iterations;
    private int findContourNum;
    private int filterContourNum;
    private double x;
    private double y;
    private double x_pos_split = 150;
    private boolean collectDone = false;

    /**
     * This is the primary method that runs the entire pipeline and updates the outputs.
     */
    @Override
    public Mat processFrame(Mat input) {
        // Step RGB_Threshold0:
        Mat hsvThresholdInput = input;

        /*
        double[] rgbThresholdRed = {redMin, redMax};
        double[] rgbThresholdGreen = {blueMin, blueMax};
        double[] rgbThresholdBlue = {greenMin, greenMax};
         */
        double[] hsvThresholdHue = {0.0, 180.0};
        double[] hsvThresholdSaturation = {98.50882930019621, 255.0};
        double[] hsvThresholdValue = {20.83460504323813, 255.0};
        hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

        // Step CV_erode0:
        //Mat cvErodeSrc = rgbThresholdOutput;
        Mat cvErodeSrc = hsvThresholdOutput;
        Mat cvErodeKernel = new Mat();
        Point cvErodeAnchor = new Point(-1, -1);
        double cvErodeIterations = 1.0;
        int cvErodeBordertype = Core.BORDER_CONSTANT;
        Scalar cvErodeBordervalue = new Scalar(-1);
        cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);

        //Step Find_Contours
        Mat findContoursInput = cvErodeOutput;
        boolean findContoursExternalOnly = false;
        findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);


        // Step Filter_Contours0:
        ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
        double filterContoursMinPerimeter = 0;
        double filterContoursMinWidth = 0;
        double filterContoursMaxWidth = 1000;
        double filterContoursMinHeight = 0.0;
        double filterContoursMaxHeight = 1000;
        double[] filterContoursSolidity = {0, 100};
        double filterContoursMaxVertices = 1000000;
        double filterContoursMinVertices = 0;
        double filterContoursMinRatio = 0;
        double filterContoursMaxRatio = 1000;
        filterContours(filterContoursContours, minArea, maxArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth, filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices, filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);

        /*
        V1:
        if(redMax < 8){
            position = "RIGHT";
        } else{
            if(filterContourNum != 1){
                redMax /= 2;
            }
            else{
                if(x >= x_pos_split){
                    position = "CENTER";
                } else{
                    position = "LEFT";
                }
            }
        }

        if(prev_position == position){
            iterations += 1;
        } else{
            prev_position = position;
            iterations = 0;
        }

        if(iterations >= iteration_threshold){
            final_position = position;
        }
        return cvErodeOutput;
*/

/*
//V2:
        if(redMax == 255){
            redMax = 128;
        }
        if(filterContourNum > 1){
            redMax /= 2;
        } else if(filterContourNum == 0){
            position = "LEFT";
        } else{
            if(x >= x_pos_split){
                position = "CENTER";
            } else{
                position = "RIGHT";
            }
        }

        if(prev_position == position){
            iterations += 1;
        } else{
            prev_position = position;
            iterations = 0;
        }

        if(iterations >= iteration_threshold){
            final_position = position;
        }
        return cvErodeOutput;
*/

        //V3: (FOR HSV THRESHOLD)
        if(filterContourNum == 1){
            if(x >= x_pos_split){
                position = "CENTER";
            } else{
                position = "RIGHT";
            }
        } else{
            position = "LEFT";
        }

        if(prev_position == position){
            iterations += 1;
        } else{
            prev_position = position;
            iterations = 0;
        }

        if(iterations >= iteration_threshold){
            final_position = position;
        }
        return cvErodeOutput;


    }


    /**
     * This method is a generated getter for the output of a RGB_Threshold.
     * @return Mat output from RGB_Threshold.
     */
    public Mat rgbThresholdOutput() {
        return rgbThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a CV_erode.
     * @return Mat output from CV_erode.
     */
    public Mat cvErodeOutput() {
        return cvErodeOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Contours.
     * @return ArrayList<MatOfPoint> output from Filter_Contours.
     */
    public ArrayList<MatOfPoint> filterContoursOutput() {
        return filterContoursOutput;
    }


    /**
     * Segment an image based on color ranges.
     * @param input The image on which to perform the RGB threshold.
     * @param red The min and max red.
     * @param green The min and max green.
     * @param blue The min and max blue.
     */
    private void rgbThreshold(Mat input, double[] red, double[] green, double[] blue,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2RGB);
        Core.inRange(out, new Scalar(red[0], green[0], blue[0]),
                new Scalar(red[1], green[1], blue[1]), out);
    }

    /**
     * Expands area of lower value in an image.
     * @param src the Image to erode.
     * @param kernel the kernel for erosion.
     * @param anchor the center of the kernel.
     * @param iterations the number of times to perform the erosion.
     * @param borderType pixel extrapolation method.
     * @param borderValue value to be used for a constant border.
     * @param dst Output Image.
     */
    private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
                         int borderType, Scalar borderValue, Mat dst) {
        if (kernel == null) {
            kernel = new Mat();
        }
        if (anchor == null) {
            anchor = new Point(-1,-1);
        }
        if (borderValue == null) {
            borderValue = new Scalar(-1);
        }
        Imgproc.erode(src, dst, kernel, anchor, (int)iterations, borderType, borderValue);
    }

    private void findContours(Mat input, boolean externalOnly,
                              List<MatOfPoint> contours) {
        Mat hierarchy = new Mat();
        contours.clear();
        int mode;
        if (externalOnly) {
            mode = Imgproc.RETR_EXTERNAL;
        }
        else {
            mode = Imgproc.RETR_LIST;
        }
        int method = Imgproc.CHAIN_APPROX_SIMPLE;
        Imgproc.findContours(input, contours, hierarchy, mode, method);
        findContourNum = findContoursOutput.size();
    }


    /**
     * Filters out contours that do not meet certain criteria.
     * @param inputContours is the input list of contours
     * @param output is the the output list of contours
     * @param minArea is the minimum area of a contour that will be kept
     * @param minPerimeter is the minimum perimeter of a contour that will be kept
     * @param minWidth minimum width of a contour
     * @param maxWidth maximum width
     * @param minHeight minimum height
     * @param maxHeight maximimum height
     * @param minVertexCount minimum vertex Count of the contours
     * @param maxVertexCount maximum vertex Count
     * @param minRatio minimum ratio of width to height
     * @param maxRatio maximum ratio of width to height
     */
    private void filterContours(List<MatOfPoint> inputContours, double minArea, double maxArea,
                                double minPerimeter, double minWidth, double maxWidth, double minHeight, double
                                        maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double
                                        minRatio, double maxRatio, List<MatOfPoint> output) {
        final MatOfInt hull = new MatOfInt();
        output.clear();
        System.out.println("INPUT CONTOURS:");
        System.out.println(inputContours.size());
        //operation
        for (int i = 0; i < inputContours.size(); i++) {
            final MatOfPoint contour = inputContours.get(i);
            final Rect bb = Imgproc.boundingRect(contour);
            if (bb.width < minWidth || bb.width > maxWidth) continue;
            if (bb.height < minHeight || bb.height > maxHeight) continue;
            final double area = Imgproc.contourArea(contour);
            if(!collectDone){
                contourAreas.add(area);
            }
            if (area < minArea || area >= maxArea) continue;
            if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter) continue;
            Imgproc.convexHull(contour, hull);
            MatOfPoint mopHull = new MatOfPoint();
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++) {
                int index = (int)hull.get(j, 0)[0];
                double[] point = new double[] { contour.get(index, 0)[0], contour.get(index, 0)[1]};
                mopHull.put(j, 0, point);
            }
            final double solid = 100 * area / Imgproc.contourArea(mopHull);
            if (solid < solidity[0] || solid > solidity[1]) continue;
            if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)	continue;
            final double ratio = bb.width / (double)bb.height;
            if (ratio < minRatio || ratio > maxRatio) continue;
            output.add(contour);
            System.out.println("X AND Y:");
            System.out.println(contour.toArray()[0].x);
            System.out.println(contour.toArray()[0].y);
            x = contour.toArray()[0].x;
            y = contour.toArray()[0].y;
        }
        collectDone = true;
        System.out.println("OUTPUT CONTOURS:");
        System.out.println(output.size());
        filterContourNum = output.size();
    }

    /**
     * Segment an image based on hue, saturation, and value ranges.
     *
     * @param input The image on which to perform the HSL threshold.
     * @param hue The min and max hue
     * @param sat The min and max saturation
     * @param val The min and max value
     */
    private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
                              Mat out) {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
        Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
                new Scalar(hue[1], sat[1], val[1]), out);
    }

    /**
     * This method is a generated getter for the output of a HSV_Threshold.
     * @return Mat output from HSV_Threshold.
     */
    public Mat hsvThresholdOutput() {
        return hsvThresholdOutput;
    }

    public double getX(){
        return x;
    }
    public double getY(){
        return y;
    }
    public double getRedMax(){
        return redMax;
    }
    public int getFindContourNum(){
        return findContourNum;
    }
    public int getFilterContourNum(){
        return filterContourNum;
    }
    public String getPosition(){
        return final_position;
    }
    public ArrayList<Double> getContourAreas(){
        return contourAreas;
    }
}